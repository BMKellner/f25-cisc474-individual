/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as DashboardRouteImport } from './routes/dashboard'
import { Route as CoursesRouteImport } from './routes/courses'
import { Route as AssignmentsRouteImport } from './routes/assignments'
import { Route as ApiDataRouteImport } from './routes/api-data'
import { Route as AdminRouteImport } from './routes/admin'
import { Route as IndexRouteImport } from './routes/index'
import { Route as UsersIndexRouteImport } from './routes/users/index'
import { Route as UsersCreateRouteImport } from './routes/users/create'
import { Route as UsersUserIdEditRouteImport } from './routes/users/$userId/edit'
import { Route as UsersUserIdDeleteRouteImport } from './routes/users/$userId/delete'

const DashboardRoute = DashboardRouteImport.update({
  id: '/dashboard',
  path: '/dashboard',
  getParentRoute: () => rootRouteImport,
} as any)
const CoursesRoute = CoursesRouteImport.update({
  id: '/courses',
  path: '/courses',
  getParentRoute: () => rootRouteImport,
} as any)
const AssignmentsRoute = AssignmentsRouteImport.update({
  id: '/assignments',
  path: '/assignments',
  getParentRoute: () => rootRouteImport,
} as any)
const ApiDataRoute = ApiDataRouteImport.update({
  id: '/api-data',
  path: '/api-data',
  getParentRoute: () => rootRouteImport,
} as any)
const AdminRoute = AdminRouteImport.update({
  id: '/admin',
  path: '/admin',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const UsersIndexRoute = UsersIndexRouteImport.update({
  id: '/users/',
  path: '/users/',
  getParentRoute: () => rootRouteImport,
} as any)
const UsersCreateRoute = UsersCreateRouteImport.update({
  id: '/users/create',
  path: '/users/create',
  getParentRoute: () => rootRouteImport,
} as any)
const UsersUserIdEditRoute = UsersUserIdEditRouteImport.update({
  id: '/users/$userId/edit',
  path: '/users/$userId/edit',
  getParentRoute: () => rootRouteImport,
} as any)
const UsersUserIdDeleteRoute = UsersUserIdDeleteRouteImport.update({
  id: '/users/$userId/delete',
  path: '/users/$userId/delete',
  getParentRoute: () => rootRouteImport,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/admin': typeof AdminRoute
  '/api-data': typeof ApiDataRoute
  '/assignments': typeof AssignmentsRoute
  '/courses': typeof CoursesRoute
  '/dashboard': typeof DashboardRoute
  '/users/create': typeof UsersCreateRoute
  '/users': typeof UsersIndexRoute
  '/users/$userId/delete': typeof UsersUserIdDeleteRoute
  '/users/$userId/edit': typeof UsersUserIdEditRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/admin': typeof AdminRoute
  '/api-data': typeof ApiDataRoute
  '/assignments': typeof AssignmentsRoute
  '/courses': typeof CoursesRoute
  '/dashboard': typeof DashboardRoute
  '/users/create': typeof UsersCreateRoute
  '/users': typeof UsersIndexRoute
  '/users/$userId/delete': typeof UsersUserIdDeleteRoute
  '/users/$userId/edit': typeof UsersUserIdEditRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/admin': typeof AdminRoute
  '/api-data': typeof ApiDataRoute
  '/assignments': typeof AssignmentsRoute
  '/courses': typeof CoursesRoute
  '/dashboard': typeof DashboardRoute
  '/users/create': typeof UsersCreateRoute
  '/users/': typeof UsersIndexRoute
  '/users/$userId/delete': typeof UsersUserIdDeleteRoute
  '/users/$userId/edit': typeof UsersUserIdEditRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/admin'
    | '/api-data'
    | '/assignments'
    | '/courses'
    | '/dashboard'
    | '/users/create'
    | '/users'
    | '/users/$userId/delete'
    | '/users/$userId/edit'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/admin'
    | '/api-data'
    | '/assignments'
    | '/courses'
    | '/dashboard'
    | '/users/create'
    | '/users'
    | '/users/$userId/delete'
    | '/users/$userId/edit'
  id:
    | '__root__'
    | '/'
    | '/admin'
    | '/api-data'
    | '/assignments'
    | '/courses'
    | '/dashboard'
    | '/users/create'
    | '/users/'
    | '/users/$userId/delete'
    | '/users/$userId/edit'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  AdminRoute: typeof AdminRoute
  ApiDataRoute: typeof ApiDataRoute
  AssignmentsRoute: typeof AssignmentsRoute
  CoursesRoute: typeof CoursesRoute
  DashboardRoute: typeof DashboardRoute
  UsersCreateRoute: typeof UsersCreateRoute
  UsersIndexRoute: typeof UsersIndexRoute
  UsersUserIdDeleteRoute: typeof UsersUserIdDeleteRoute
  UsersUserIdEditRoute: typeof UsersUserIdEditRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/dashboard': {
      id: '/dashboard'
      path: '/dashboard'
      fullPath: '/dashboard'
      preLoaderRoute: typeof DashboardRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/courses': {
      id: '/courses'
      path: '/courses'
      fullPath: '/courses'
      preLoaderRoute: typeof CoursesRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/assignments': {
      id: '/assignments'
      path: '/assignments'
      fullPath: '/assignments'
      preLoaderRoute: typeof AssignmentsRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/api-data': {
      id: '/api-data'
      path: '/api-data'
      fullPath: '/api-data'
      preLoaderRoute: typeof ApiDataRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/admin': {
      id: '/admin'
      path: '/admin'
      fullPath: '/admin'
      preLoaderRoute: typeof AdminRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/users/': {
      id: '/users/'
      path: '/users'
      fullPath: '/users'
      preLoaderRoute: typeof UsersIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/users/create': {
      id: '/users/create'
      path: '/users/create'
      fullPath: '/users/create'
      preLoaderRoute: typeof UsersCreateRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/users/$userId/edit': {
      id: '/users/$userId/edit'
      path: '/users/$userId/edit'
      fullPath: '/users/$userId/edit'
      preLoaderRoute: typeof UsersUserIdEditRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/users/$userId/delete': {
      id: '/users/$userId/delete'
      path: '/users/$userId/delete'
      fullPath: '/users/$userId/delete'
      preLoaderRoute: typeof UsersUserIdDeleteRouteImport
      parentRoute: typeof rootRouteImport
    }
  }
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  AdminRoute: AdminRoute,
  ApiDataRoute: ApiDataRoute,
  AssignmentsRoute: AssignmentsRoute,
  CoursesRoute: CoursesRoute,
  DashboardRoute: DashboardRoute,
  UsersCreateRoute: UsersCreateRoute,
  UsersIndexRoute: UsersIndexRoute,
  UsersUserIdDeleteRoute: UsersUserIdDeleteRoute,
  UsersUserIdEditRoute: UsersUserIdEditRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

import type { getRouter } from './router.tsx'
import type { createStart } from '@tanstack/react-start'
declare module '@tanstack/react-start' {
  interface Register {
    ssr: true
    router: Awaited<ReturnType<typeof getRouter>>
  }
}
